// Idea: Create a maze in STDOUT
// gcc {filename}.c -o {outputname}
// ./{filename}

#ifndef __drako_level3
#define __drako_level3

#include <stdio.h>
#include <drako/drako.h>

#define MAZE_ROWS 25
#define MAZE_COLS 69

static const char MAZE[MAZE_ROWS][MAZE_COLS] = {
' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','v',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','x','#','#','#','#','#','#','#','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','d','x','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',
'#','#','.','#','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#','7','#','#','.','.','.','.','.','#','.','#','#',
'#','#','.','#','.','#','#','#','#','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','#','#','.','#','#','.','#','#',
'#','#','.','.','.','#','#','#','.','.','.','.','.','.','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','.','.','.','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','.','#','#','.','#','#',
'#','#','#','#','.','.','.','.','.','#','#','#','#','.','.','.','.','.','.','.','.','#','#','.','.','.','.','#','#','.','#','#','#','#','#','#','#','#','#','#','.','#','.','#','#','#','.','.','.','.','.','#','.','.','.','.','.','.','.','.','.','#','#','.','#','.','.','#','#',
'#','.','.','#','#','#','#','#','.','.','.','#','#','.','#','#','#','#','#','#','#','#','#','.','#','#','#','#','#','.','.','#','#','3','#','#','.','.','.','.','.','#','.','.','.','#','#','.','#','#','.','#','#','#','#','#','#','#','#','#','.','#','#','.','#','.','#','#','#',
'#','#','.','.','#','/','#','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#','.','.','#','#','#','#','#','#','#','#','.','#','#','#','.','#','#','.','.','.','.','#','#',')','#','#','.','#','#','#','.','#','#','#','#','.','#','#','#',
'#','#','#','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#','#','#','#','#','#','#','#','i','n','t','#','#','.','.','.','.','.','.','.','.','.','.','#','#','#','.','#','#','.','#','#','#','#','.','.','.','.','.','#','!','#','.','.','.','.','.','.','#','6','#',
'#','#','#','.','#','#','.','#','.','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','.','.','.','.','#','.','.','.','.','.','.','#','#','#','.','#','#','#','.','#','#','#','#','#','#','#','#',
'#','.','.','.','#','.','.','#','.','.','.','.','.','.','#','.','#','#','#','#','#','#','#','#','.','#','#','.','.','.','#','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','.','#','#','#','#','#','#','-','#','.','.','.','#','#','#','#','.','.','.','.','.','#',
'#','.','#','.','#','#','#','#','#','#','#','#','#','.','#','.','.','.','.','.','#','.','.','#','.','.','.','.','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','#','#','#','#','.','#','#','.','.','.','.','#','#','#','.','#',
'#','.','#','.','.','.','.','.','.','#','#','4','#','#','#','#','.','#','#','#','#','#','.','#','#','#','#','.','.','.','#','.','.','.','#','.','.','.','.','.','.','#','.','.','.','#','#','#','#','.','#','.','#','#','.','.','.','.','#','.','.','#','#','#','#','.','#','.','#',
'#','.','#','#','#','#','.','#','#','#','#','#','#','#','.','#','.','.','.','.','.','.','.','.','.','#','#','#','#','.','#','.','.','.','#','.','#','#','#','.','#','#','#','#','#','#','#','#','.','.','#','.','#','#','#','#','#','#','#','.','#','#','.','#','#','.','#','.','#',
'#','.','#','.','#','#','.','#','#','.','.','.','.','.','.','#','#','#','#','#','#','#','#','#','.','.','.','.','#','.','#','#','#','#','#','.','#','#','.','.','.','.','.','.','.','.','.','#','#','#','.','.','.','.','.','.','.','#','#','.','#','.','.','.','.','.','#','.','#',
'#','.','#','.','#','#','.','#','+','#','#','.','#','#','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','.','.','.','.','.','.','.','#','#','.','#','#','#','.','#','#','.','#','#','.','.','.','#','#','#','#','#','.','.','.','.','#','.','#','#','#','#','#','.','#',
'#','.','#','.','#','#','.','#','#','#','#','.','#','#','#','#','#','.','#','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','#','#','.','.','#','%','#','.','#','#','.','#','#','#','#','#','#','#','.','#','#','#','#','#','#','#','.','#','#','.','.','.','.','#',
'#','.','#','.','.','.','.','#','#','.','#','.','.','.','.','#','#','.','#','#','#','1','#','#','.','.','.','#','5','#','.','.','.','.','#','#','#','#','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','.','#','#',
'#','.','#','#','#','#','.','#','#','.','#','#','#','#','.','#','#','.','#','#','#','#','#','#','#','#','.','#','#','#','#','.','#','#','#','#','.','.','.','#','#','.','#','#','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','.','#','#',
'#','.','.','.','#','#','.','.','.','.','#','y','#','#','.','#','#','.','.','.','.','#','#','#','#','#','.','.','.','.','.','.','.','#','#','#','#','#','.','#','#','.','.','.','#','.','.','.','.','.','#','#','.','.','.','#','#','#','#','#','#','#','#','.','.','.','.','#','#',
'#','#','#','.','.','#','.','#','#','#','#','#','#','.','.','.','#','#','#','#','.','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','.','.','#','#','#','.','#','#','#','#','.','#','#','#','#','.','9','.','#','.','.','.','.','.','.','.','.','#','#','.','.','#',
'#','#','#','#','#','#','.','#','#','8','#','#','#','.','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','.','.','.','.','.','.','.','.','.','.','#','#','#','#','.','#','.','#','.','#','.','#','#','#','#','#','#','#','#','.','#',
'#','#','.','.','.','.','.','.','.','.','.','#','#','#','#','#','.','.','.','.','.','#','#','#','#','#','#','#','#','#','#','#','#','#','.','#','#','#','#','#','#','#','.','#','#','#','#','.','#','#','#','#','.','#','#','#','.','#','.','#','#','#','#','*','#','#','#','.','#',
'#','#','.','#','#','#','#','#','#','#','.','.','.','.','.','.','.','#','#','#','#','2','#','#','#','#','.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#','#','#','#','.','.','.','.','.','.','.','.','.','.','#','.','.','.','.','.','.','.','.','.','.','#',
'0','#','#','#','#','#','(','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','^','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'
};

// static inline void maze_setup() {
//     // Setup User Position [Row:2,Col:33]
//     int userRow = 1;
//     int userCol = 32;
//     level3_main("pass", userRow, userCol);
// }

static inline void level3_greeting() {
    printf("As you navigate through the darkness, you notice a path into\n");
    printf("an otherwise impenetrable wall. You are certain what you seek lies\n");
    printf("beyond it. Try navigating the maze by typing the w,a,s,d keys.\n");
    printf("and then press enter.\n");
}

static inline void level3() {
    // display level
    printf("\n----- LEVEL 3 -----\n");
    level3_greeting();
}

static inline void clear(void) {
    while (getchar() != '\n');
}

static inline void printMaze(int row, int col) {
    for (int i = 0; i < MAZE_ROWS; i++) {
        for (int j = 0; j < MAZE_COLS; j++) {
            // if far away, print X
            if ((i == row) && (j == col)) {
                printf("A");
            }
            else if (((i == 12) || (i == 13)) && ((j >= 31) && (j <= 33))) {
                printf(".");
            }
            else if (((row - 5 > i) || (row + 5 < i)) || ((col - 5 > j) || (col + 5 < j))) {
                printf("X");
            }
            else {
                printf("%c", MAZE[i][j]);
            }
        }
        printf("\n");
    }
}

bool level3_main(char* cmd);

#endif